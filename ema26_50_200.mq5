//+------------------------------------------------------------------+
//| EMA26/EMA50/EMA200 + Stochastic Strategy EA                      |
//+------------------------------------------------------------------+
#property strict
#include <Trade/Trade.mqh>

// Input Parameters
input double Lots = 0.10;
input int SL_Points = 500;
input int TP_Points = 1000;
input int EMA26_Period = 26;
input int EMA50_Period = 50;
input int EMA200_Period = 200;
input int Stoch_K = 9;
input int Stoch_D = 3;
input int Stoch_Slowing = 3;
input ulong Magic = 123456;

// Lock-after-profit settings
input int ProfitTriggerPoints = 200; // ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡ªÄ‡∫°‡∫∑‡ªà‡∫≠‡∫Å‡∫≥‡ªÑ‡∫• ‚â• 200 ‡∫à‡∫∏‡∫î
input int LockPoints = 20;           // ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡ªÑ‡∫õ entry ¬± 20 ‡∫à‡∫∏‡∫î

// Time filter settings (Bangkok timezone = GMT+7)
input bool UseTimeFilter = true;     // ‡ªÄ‡∫õ‡∫µ‡∫î/‡∫õ‡∫¥‡∫î‡∫Å‡∫≤‡∫ô‡∫Å‡∫±‡ªà‡∫ô‡∫ï‡∫≠‡∫á‡ªÄ‡∫ß‡∫•‡∫≤
input int StartHour = 5;             // ‡ªÄ‡∫ß‡∫•‡∫≤‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡ªÄ‡∫ó‡∫£‡∫î (‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á)
input int EndHour = 23;              // ‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡ªÄ‡∫ó‡∫£‡∫î (‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á)
input int BangkokGMTOffset = 7;      // Bangkok = GMT+7

// Daily loss limit settings
input bool UseDailyLossLimit = true; // ‡ªÄ‡∫õ‡∫µ‡∫î/‡∫õ‡∫¥‡∫î‡∫Å‡∫≤‡∫ô‡∫à‡∫≥‡∫Å‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡∫Ç‡∫≤‡∫î‡∫ó‡∫∂‡∫ô‡∫ï‡ªç‡ªà‡∫ß‡∫±‡∫ô
input int MaxDailySLHits = 2;        // ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫±‡ªâ‡∫á‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å SL ‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î‡∫ï‡ªç‡ªà‡∫ß‡∫±‡∫ô

// Global Variables
CTrade trade;
int hEMA26, hEMA50, hEMA200, hStoch;
datetime lastBarTime = 0;
bool slLocked = false; // ‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°‡∫ß‡ªà‡∫≤ SL ‡∫ñ‡∫∑‡∫Å‡∫ç‡ªâ‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß‡∫´‡∫º‡∫∑‡∫ç‡∫±‡∫á

// Daily loss tracking
int dailySLHitCount = 0;      // ‡∫ô‡∫±‡∫ö‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫±‡ªâ‡∫á‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å SL ‡ªÉ‡∫ô‡∫ß‡∫±‡∫ô‡∫ô‡∫µ‡ªâ
datetime lastTradeDate = 0;   // ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡ªà‡ªÄ‡∫ó‡∫£‡∫î‡∫Ñ‡∫±‡ªâ‡∫á‡∫™‡∫∏‡∫î‡∫ó‡ªâ‡∫≤‡∫ç
ulong lastPositionTicket = 0; // Ticket ‡∫Ç‡∫≠‡∫á position ‡∫™‡∫∏‡∫î‡∫ó‡ªâ‡∫≤‡∫ç‡∫ó‡∫µ‡ªà‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°

//+------------------------------------------------------------------+
//| Check if new bar formed                                          |
//+------------------------------------------------------------------+
bool IsNewBar()
{
   datetime t[2];
   if(CopyTime(_Symbol, PERIOD_CURRENT, 0, 2, t) < 2) return false;
   if(t[0] != lastBarTime) 
   { 
      lastBarTime = t[0]; 
      return true; 
   }
   return false;
}

//+------------------------------------------------------------------+
//| Get EMA values                                                   |
//+------------------------------------------------------------------+
bool GetEMAValues(double &ema26, double &ema50, double &ema200)
{
   if(hEMA26 == INVALID_HANDLE || hEMA50 == INVALID_HANDLE || hEMA200 == INVALID_HANDLE) return false;
   
   double ema26_buf[1], ema50_buf[1], ema200_buf[1];
   if(CopyBuffer(hEMA26, 0, 1, 1, ema26_buf) != 1) return false;
   if(CopyBuffer(hEMA50, 0, 1, 1, ema50_buf) != 1) return false;
   if(CopyBuffer(hEMA200, 0, 1, 1, ema200_buf) != 1) return false;
   
   ema26 = ema26_buf[0];
   ema50 = ema50_buf[0];
   ema200 = ema200_buf[0];
   return true;
}

//+------------------------------------------------------------------+
//| Get Stochastic values                                            |
//+------------------------------------------------------------------+
bool GetStochValues(double &stoch_main, double &stoch_signal)
{
   if(hStoch == INVALID_HANDLE) return false;
   
   double stoch_main_buf[1], stoch_signal_buf[1];
   if(CopyBuffer(hStoch, 0, 1, 1, stoch_main_buf) != 1) return false;
   if(CopyBuffer(hStoch, 1, 1, 1, stoch_signal_buf) != 1) return false;
   
   stoch_main = stoch_main_buf[0];
   stoch_signal = stoch_signal_buf[0];
   return true;
}

//+------------------------------------------------------------------+
//| Check and reset daily SL hit counter if new day                 |
//+------------------------------------------------------------------+
void CheckAndResetDailyCounter()
{
   if(!UseDailyLossLimit) return;
   
   datetime currentTime = TimeCurrent();
   MqlDateTime dtCurrent, dtLast;
   TimeToStruct(currentTime, dtCurrent);
   TimeToStruct(lastTradeDate, dtLast);
   
   // ‡∫ñ‡ªâ‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô‡∫ß‡∫±‡∫ô‡ªÉ‡ªù‡ªà, reset counter
   if(dtCurrent.day != dtLast.day || dtCurrent.mon != dtLast.mon || dtCurrent.year != dtLast.year)
   {
      if(dailySLHitCount > 0) // ‡∫û‡∫¥‡∫°‡∫û‡∫Ω‡∫á‡ªÄ‡∫°‡∫∑‡ªà‡∫≠‡∫°‡∫µ‡∫Å‡∫≤‡∫ô reset
      {
         Print("=== ‡∫ß‡∫±‡∫ô‡ªÉ‡ªù‡ªà‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô - Reset SL counter ===");
         Print("‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡ªà‡∫ú‡ªà‡∫≤‡∫ô‡∫°‡∫≤: ", dtLast.year, "-", dtLast.mon, "-", dtLast.day, " ‡∫ñ‡∫∑‡∫Å SL: ", dailySLHitCount, " ‡∫Ñ‡∫±‡ªâ‡∫á");
      }
      dailySLHitCount = 0;
      lastTradeDate = currentTime;
   }
}

//+------------------------------------------------------------------+
//| Check if position was closed by SL                              |
//+------------------------------------------------------------------+
void CheckForSLHit()
{
   if(!UseDailyLossLimit) return;
   
   // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö position history
   if(HistorySelect(0, TimeCurrent()))
   {
      int totalDeals = HistoryDealsTotal();
      
      // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö deal ‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î
      for(int i = totalDeals - 1; i >= 0; i--)
      {
         ulong dealTicket = HistoryDealGetTicket(i);
         if(dealTicket <= 0) continue;
         
         // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô deal ‡∫Ç‡∫≠‡∫á symbol ‡∫ô‡∫µ‡ªâ‡ªÅ‡∫•‡∫∞ magic number ‡∫ô‡∫µ‡ªâ‡∫ö‡ªç‡ªà
         if(HistoryDealGetString(dealTicket, DEAL_SYMBOL) != _Symbol) continue;
         if(HistoryDealGetInteger(dealTicket, DEAL_MAGIC) != Magic) continue;
         
         // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô deal ‡∫õ‡∫¥‡∫î position ‡∫ö‡ªç‡ªà
         ENUM_DEAL_ENTRY entryType = (ENUM_DEAL_ENTRY)HistoryDealGetInteger(dealTicket, DEAL_ENTRY);
         if(entryType != DEAL_ENTRY_OUT) continue;
         
         // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô deal ‡∫ó‡∫µ‡ªà‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡∫ô‡∫±‡∫ö‡∫ö‡ªç‡ªà
         ulong positionTicket = HistoryDealGetInteger(dealTicket, DEAL_POSITION_ID);
         if(positionTicket == lastPositionTicket) break; // ‡∫ô‡∫±‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß, ‡∫¢‡∫∏‡∫î‡∫ä‡∫≠‡∫Å‡∫´‡∫≤
         
         // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫ñ‡∫∑‡∫Å SL ‡∫ö‡ªç‡ªà
         ENUM_DEAL_REASON reason = (ENUM_DEAL_REASON)HistoryDealGetInteger(dealTicket, DEAL_REASON);
         if(reason == DEAL_REASON_SL)
         {
            dailySLHitCount++;
            lastPositionTicket = positionTicket;
            
            double profit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
            Print("‚ö†Ô∏è ‡∫ñ‡∫∑‡∫Å SL! ‡∫Ñ‡∫±‡ªâ‡∫á‡∫ó‡∫µ‡ªà ", dailySLHitCount, " ‡ªÉ‡∫ô‡∫ß‡∫±‡∫ô‡∫ô‡∫µ‡ªâ (‡∫Ç‡∫≤‡∫î‡∫ó‡∫∂‡∫ô: ", profit, ")");
            
            if(dailySLHitCount >= MaxDailySLHits)
            {
               Print("üõë ‡∫ñ‡∫∑‡∫Å SL ", dailySLHitCount, " ‡∫Ñ‡∫±‡ªâ‡∫á‡ªÅ‡∫•‡ªâ‡∫ß - ‡∫¢‡∫∏‡∫î‡ªÄ‡∫ó‡∫£‡∫î‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫ß‡∫±‡∫ô‡∫ô‡∫µ‡ªâ!");
            }
            
            break; // ‡∫û‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß, ‡∫¢‡∫∏‡∫î‡∫ä‡∫≠‡∫Å‡∫´‡∫≤
         }
         
         break; // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫û‡∫Ω‡∫á deal ‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î
      }
   }
}

//+------------------------------------------------------------------+
//| Check if can trade today (not exceeded daily SL limit)          |
//+------------------------------------------------------------------+
bool CanTradeToday()
{
   if(!UseDailyLossLimit) return true;
   
   CheckAndResetDailyCounter();
   
   if(dailySLHitCount >= MaxDailySLHits)
   {
      static datetime lastWarningTime = 0;
      datetime currentTime = TimeCurrent();
      
      // ‡∫û‡∫¥‡∫° warning ‡∫ó‡∫∏‡∫Å‡ªÜ 30 ‡∫ô‡∫≤‡∫ó‡∫µ
      if(currentTime - lastWarningTime > 1800)
      {
         Print("‚õî ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫ó‡∫£‡∫î‡ªÑ‡∫î‡ªâ: ‡∫ñ‡∫∑‡∫Å SL ", dailySLHitCount, " ‡∫Ñ‡∫±‡ªâ‡∫á‡ªÅ‡∫•‡ªâ‡∫ß (‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î: ", MaxDailySLHits, " ‡∫Ñ‡∫±‡ªâ‡∫á/‡∫ß‡∫±‡∫ô)");
         Print("   ‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫ß‡∫±‡∫ô‡ªÉ‡ªù‡ªà‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫ó‡∫£‡∫î‡∫ï‡ªç‡ªà...");
         lastWarningTime = currentTime;
      }
      return false;
   }
   
   return true;
}

//+------------------------------------------------------------------+
//| Check if current time is within trading hours (Bangkok time)    |
//+------------------------------------------------------------------+
bool IsWithinTradingHours()
{
   if(!UseTimeFilter) return true; // ‡∫ñ‡ªâ‡∫≤‡∫ö‡ªç‡ªà‡ªÉ‡∫ä‡ªâ time filter, ‡∫≠‡∫∞‡∫ô‡∫∏‡∫ç‡∫≤‡∫î‡ªÄ‡∫ó‡∫£‡∫î‡∫ï‡∫∞‡∫´‡∫º‡∫≠‡∫î
   
   datetime serverTime = TimeCurrent();
   MqlDateTime dt;
   TimeToStruct(serverTime, dt);
   
   // ‡ªÅ‡∫õ‡∫á‡ªÄ‡∫ß‡∫•‡∫≤ server ‡ªÑ‡∫õ‡ªÄ‡∫õ‡∫±‡∫ô‡ªÄ‡∫ß‡∫•‡∫≤ Bangkok (GMT+7)
   // ‡∫ñ‡ªâ‡∫≤ broker ‡ªÄ‡∫õ‡∫±‡∫ô GMT+0, ‡∫ï‡ªâ‡∫≠‡∫á‡∫ö‡∫ß‡∫Å 7 ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á
   // ‡∫ñ‡ªâ‡∫≤ broker ‡ªÄ‡∫õ‡∫±‡∫ô GMT+2 (‡ªÄ‡∫ä‡∫±‡ªà‡∫ô: ‡∫´‡∫º‡∫≤‡∫ç‡ªÜ broker), ‡∫ï‡ªâ‡∫≠‡∫á‡∫ö‡∫ß‡∫Å 5 ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á
   
   // ‡∫´‡∫≤ GMT offset ‡∫Ç‡∫≠‡∫á broker
   int serverGMTOffset = (int)(TimeGMTOffset() / 3600); // ‡ªÅ‡∫õ‡∫á‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ‡ªÄ‡∫õ‡∫±‡∫ô‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á
   int hoursDiff = BangkokGMTOffset - serverGMTOffset;
   
   // ‡ªÄ‡∫ß‡∫•‡∫≤ Bangkok
   int bangkokHour = dt.hour + hoursDiff;
   
   // ‡∫õ‡∫±‡∫ö‡∫ñ‡ªâ‡∫≤‡∫Ç‡ªâ‡∫≤‡∫°‡∫ß‡∫±‡∫ô
   if(bangkokHour >= 24) bangkokHour -= 24;
   if(bangkokHour < 0) bangkokHour += 24;
   
   // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡∫≠‡∫∞‡∫ô‡∫∏‡∫ç‡∫≤‡∫î‡∫ö‡ªç‡ªà
   bool withinHours = (bangkokHour >= StartHour && bangkokHour < EndHour);
   
   if(!withinHours)
   {
      static datetime lastPrintTime = 0;
      // Print ‡∫ó‡∫∏‡∫Å‡ªÜ 1 ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ö‡ªç‡ªà‡ªÉ‡∫´‡ªâ log ‡ªÄ‡∫ï‡∫±‡∫°
      if(serverTime - lastPrintTime > 3600)
      {
         Print("‡∫ô‡∫≠‡∫Å‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡ªÄ‡∫ó‡∫£‡∫î - Bangkok time: ", bangkokHour, ":00 (‡∫≠‡∫∞‡∫ô‡∫∏‡∫ç‡∫≤‡∫î: ", StartHour, ":00-", EndHour, ":00)");
         lastPrintTime = serverTime;
      }
   }
   
   return withinHours;
}

//+------------------------------------------------------------------+
//| Manage Lock After Profit                                         |
//+------------------------------------------------------------------+
void ManageLockAfterProfit()
{
   if(!PositionSelect(_Symbol)) return;
   
   // ‡∫ñ‡ªâ‡∫≤ SL ‡∫ñ‡∫∑‡∫Å‡∫ç‡ªâ‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß, ‡∫ö‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫ß‡∫î‡∫≠‡∫µ‡∫Å
   if(slLocked) return;
   
   double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   int digits = (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   
   long type = PositionGetInteger(POSITION_TYPE);
   double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
   double currentSL = PositionGetDouble(POSITION_SL);
   double currentTP = PositionGetDouble(POSITION_TP);
   
   // ‡∫Ñ‡∫¥‡∫î‡ªÑ‡∫•‡ªà‡∫Å‡∫≥‡ªÑ‡∫•‡ªÄ‡∫õ‡∫±‡∫ô‡∫à‡∫∏‡∫î
   double profitPoints = 0.0;
   if(type == POSITION_TYPE_BUY)
      profitPoints = (bid - openPrice) / point;
   else if(type == POSITION_TYPE_SELL)
      profitPoints = (openPrice - ask) / point;
   
   // ‡∫ñ‡ªâ‡∫≤‡∫Å‡∫≥‡ªÑ‡∫• ‚â• 200 ‡∫à‡∫∏‡∫î, ‡∫ç‡ªâ‡∫≤‡∫ç SL
   if(profitPoints >= ProfitTriggerPoints)
   {
      double newSL = 0.0;
      
      if(type == POSITION_TYPE_BUY)
      {
         // BUY: ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡ªÑ‡∫õ entry + 20 ‡∫à‡∫∏‡∫î
         newSL = openPrice + (LockPoints * point);
         newSL = NormalizeDouble(newSL, digits);
         
         if(trade.PositionModify(_Symbol, newSL, currentTP))
         {
            Print("BUY: SL ‡∫ç‡ªâ‡∫≤‡∫ç‡ªÑ‡∫õ entry +", LockPoints, " ‡∫à‡∫∏‡∫î @ ", newSL, " (‡∫Å‡∫≥‡ªÑ‡∫•: ", (int)profitPoints, " ‡∫à‡∫∏‡∫î)");
            slLocked = true;
         }
         else
         {
            Print("BUY: ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î. Retcode=", trade.ResultRetcode());
         }
      }
      else if(type == POSITION_TYPE_SELL)
      {
         // SELL: ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡ªÑ‡∫õ entry - 20 ‡∫à‡∫∏‡∫î
         newSL = openPrice - (LockPoints * point);
         newSL = NormalizeDouble(newSL, digits);
         
         if(trade.PositionModify(_Symbol, newSL, currentTP))
         {
            Print("SELL: SL ‡∫ç‡ªâ‡∫≤‡∫ç‡ªÑ‡∫õ entry -", LockPoints, " ‡∫à‡∫∏‡∫î @ ", newSL, " (‡∫Å‡∫≥‡ªÑ‡∫•: ", (int)profitPoints, " ‡∫à‡∫∏‡∫î)");
            slLocked = true;
         }
         else
         {
            Print("SELL: ‡∫ç‡ªâ‡∫≤‡∫ç SL ‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î. Retcode=", trade.ResultRetcode());
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   trade.SetExpertMagicNumber(Magic);
   
   // Create EMA indicators
   hEMA26 = iMA(_Symbol, PERIOD_CURRENT, EMA26_Period, 0, MODE_EMA, PRICE_CLOSE);
   hEMA50 = iMA(_Symbol, PERIOD_CURRENT, EMA50_Period, 0, MODE_EMA, PRICE_CLOSE);
   hEMA200 = iMA(_Symbol, PERIOD_CURRENT, EMA200_Period, 0, MODE_EMA, PRICE_CLOSE);
   
   // Create Stochastic indicator
   hStoch = iStochastic(_Symbol, PERIOD_CURRENT, Stoch_K, Stoch_D, Stoch_Slowing, MODE_SMA, STO_LOWHIGH);
   
   if(hEMA26 == INVALID_HANDLE || hEMA50 == INVALID_HANDLE || hEMA200 == INVALID_HANDLE || hStoch == INVALID_HANDLE)
   {
      Print("Failed to create indicator handles");
      return INIT_FAILED;
   }
   
   datetime t[1];
   if(CopyTime(_Symbol, PERIOD_CURRENT, 0, 1, t) == 1) lastBarTime = t[0];
   
   Print("EMA26/EMA50/EMA200 + Stochastic EA initialized");
   Print("EMA26: ", EMA26_Period, ", EMA50: ", EMA50_Period, ", EMA200: ", EMA200_Period);
   Print("Stochastic: ", Stoch_K, ",", Stoch_D, ",", Stoch_Slowing);
   Print("SL: ", SL_Points, ", TP: ", TP_Points, " points");
   Print("Lock SL: ‡∫Å‡∫≥‡ªÑ‡∫• ‚â• ", ProfitTriggerPoints, " ‡∫à‡∫∏‡∫î ‚Üí ‡∫ç‡ªâ‡∫≤‡∫ç‡ªÑ‡∫õ entry ¬± ", LockPoints, " ‡∫à‡∫∏‡∫î");
   
   if(UseTimeFilter)
      Print("Time Filter: ‡ªÄ‡∫ó‡∫£‡∫î‡∫û‡∫Ω‡∫á ", StartHour, ":00 - ", EndHour, ":00 (Bangkok GMT+7)");
   else
      Print("Time Filter: ‡∫õ‡∫¥‡∫î (‡ªÄ‡∫ó‡∫£‡∫î‡∫ï‡∫∞‡∫´‡∫º‡∫≠‡∫î 24 ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á)");
   
   if(UseDailyLossLimit)
      Print("Daily Loss Limit: ‡∫¢‡∫∏‡∫î‡ªÄ‡∫ó‡∫£‡∫î‡∫´‡∫º‡∫±‡∫á‡∫ñ‡∫∑‡∫Å SL ", MaxDailySLHits, " ‡∫Ñ‡∫±‡ªâ‡∫á/‡∫ß‡∫±‡∫ô");
   else
      Print("Daily Loss Limit: ‡∫õ‡∫¥‡∫î (‡∫ö‡ªç‡ªà‡∫à‡∫≥‡∫Å‡∫±‡∫î‡∫à‡∫≥‡∫ô‡∫ß‡∫ô SL)");
   
   // Initialize date tracking
   lastTradeDate = TimeCurrent();
   
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   if(hEMA26 != INVALID_HANDLE) IndicatorRelease(hEMA26);
   if(hEMA50 != INVALID_HANDLE) IndicatorRelease(hEMA50);
   if(hEMA200 != INVALID_HANDLE) IndicatorRelease(hEMA200);
   if(hStoch != INVALID_HANDLE) IndicatorRelease(hStoch);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫°‡∫µ position ‡∫õ‡∫¥‡∫î‡∫î‡ªâ‡∫ß‡∫ç SL ‡∫ö‡ªç‡ªà
   CheckForSLHit();
   
   // ‡∫ñ‡ªâ‡∫≤‡∫°‡∫µ position ‡ªÄ‡∫õ‡∫µ‡∫î‡∫¢‡∫π‡ªà, ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡∫ç‡ªâ‡∫≤‡∫ç SL (‡∫ö‡ªç‡ªà‡∫Ç‡∫∂‡ªâ‡∫ô‡∫Å‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤)
   if(PositionSelect(_Symbol))
   {
      ManageLockAfterProfit();
      return;
   }
   
   if(!IsNewBar()) return;
   
   // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫ñ‡∫∑‡∫Å SL ‡ªÄ‡∫Å‡∫µ‡∫ô‡∫Å‡∫≥‡∫ô‡∫ª‡∫î‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç‡ªà
   if(!CanTradeToday()) return;
   
   // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤‡∫Å‡ªà‡∫≠‡∫ô‡∫ä‡∫≠‡∫Å‡∫´‡∫≤‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡ªÉ‡ªù‡ªà
   if(!IsWithinTradingHours()) return;
   
   // Get indicator values
   double ema26, ema50, ema200, stoch_main, stoch_signal;
   if(!GetEMAValues(ema26, ema50, ema200)) return;
   if(!GetStochValues(stoch_main, stoch_signal)) return;
   
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   int digits = (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
   
   // BUY Signal: ‡ªÄ‡∫á‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫Ç‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á
   // 1. Stochastic ‚â§ 20 (oversold)
   // 2. ‡∫•‡∫≤‡∫Ñ‡∫≤ > EMA26 > EMA50 > EMA200 (‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö trend ‡∫Å‡ªà‡∫≠‡∫ô)
   if(stoch_main <= 20 && ask > ema200 && ask > ema26 && ema26 > ema50 && ema50 > ema200)
   {
      Print("BUY Signal: Stochastic oversold, Price > EMA26 > EMA50 > EMA200");
      Print("Price: ", ask, " > EMA26: ", ema26, " > EMA50: ", ema50, " > EMA200: ", ema200);
      Print("Stoch: ", stoch_main, "/", stoch_signal);
      
      double sl = ask - SL_Points * point;
      double tp = ask + TP_Points * point;
      
      sl = NormalizeDouble(sl, digits);
      tp = NormalizeDouble(tp, digits);
      
      if(trade.Buy(Lots, _Symbol, ask, sl, tp, "EMA26>50>200 + Stoch Buy"))
      {
         Print("BUY order opened - Entry: ", ask, ", SL: ", sl, ", TP: ", tp);
         slLocked = false; // Reset flag for new position
      }
      else
      {
         Print("BUY order failed - Error: ", trade.ResultRetcode());
      }
   }
   // SELL Signal: ‡ªÄ‡∫á‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫Ç‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á
   // 1. Stochastic ‚â• 80 (overbought)
   // 2. ‡∫•‡∫≤‡∫Ñ‡∫≤ < EMA26 < EMA50 < EMA200 (‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö trend ‡∫Å‡ªà‡∫≠‡∫ô)
   else if(stoch_main >= 80 && bid < ema200 && bid < ema26 && ema26 < ema50 && ema50 < ema200)
   {
      Print("SELL Signal: Stochastic overbought, Price < EMA26 < EMA50 < EMA200");
      Print("Price: ", bid, " < EMA26: ", ema26, " < EMA50: ", ema50, " < EMA200: ", ema200);
      Print("Stoch: ", stoch_main, "/", stoch_signal);
      
      double sl = bid + SL_Points * point;
      double tp = bid - TP_Points * point;
      
      sl = NormalizeDouble(sl, digits);
      tp = NormalizeDouble(tp, digits);
      
      if(trade.Sell(Lots, _Symbol, bid, sl, tp, "EMA26<50<200 + Stoch Sell"))
      {
         Print("SELL order opened - Entry: ", bid, ", SL: ", sl, ", TP: ", tp);
         slLocked = false; // Reset flag for new position
      }
      else
      {
         Print("SELL order failed - Error: ", trade.ResultRetcode());
      }
   }
}
